apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $.Name }}-keeper
spec:
  serviceName: "{{ $.Name }}-keeper"
  replicas: {{ $.Params.KEEPER_NODES }}
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      component: stolon-keeper
      stolon-cluster: {{ $.Params.CLUSTER_NAME }}
  template:
    metadata:
      labels:
        component: stolon-keeper
        stolon-cluster: {{ $.Params.CLUSTER_NAME }}
        {{ if eq .Params.PROMETHEUS_EXPORTER_ENABLED "true" }}
        kudo.dev/servicemonitor: "true"
        {{ end }}
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ $.Params.INTERNAL_STOLON_METRICS_EXPORTER_PORT }}"
    spec:
      serviceAccountName: "{{ $.Name }}-sa"
      terminationGracePeriodSeconds: 10
      containers:
        - name: stolon-keeper
          image: {{ $.Params.STOLON_DOCKER_IMAGE }}
          imagePullPolicy: {{ $.Params.STOLON_DOCKER_IMAGE_PULL_POLICY }}
          command:
            - "/bin/bash"
            - "-ec"
            - |
              # Generate our keeper uid using the pod index
              IFS='-' read -ra ADDR <<< "$(hostname)"
              export STKEEPER_UID="keeper${ADDR[-1]}"
              export POD_IP=$(hostname -i)
              export STKEEPER_PG_LISTEN_ADDRESS=$POD_IP
              export STOLON_DATA=/stolon-data
              chown stolon:stolon $STOLON_DATA
              exec gosu stolon stolon-keeper --data-dir $STOLON_DATA
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: STKEEPER_CLUSTER_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['stolon-cluster']
            - name: STKEEPER_STORE_BACKEND
              value: "kubernetes"
            - name: STKEEPER_KUBE_RESOURCE_KIND
              value: "configmap"
            - name: STKEEPER_PG_REPL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ $.Params.CREDENTIALS_SECRET_NAME }}
                  key: repluser-name
            - name: STKEEPER_PG_REPL_PASSWORDFILE
              value: "/etc/secrets/credentials/repluser-password"
            - name: STKEEPER_PG_SU_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ $.Params.CREDENTIALS_SECRET_NAME }}
                  key: superuser-name
            - name: STKEEPER_PG_SU_PASSWORDFILE
              value: "/etc/secrets/credentials/superuser-password"
            {{ if eq $.Params.PROMETHEUS_EXPORTER_ENABLED "true" }}
            - name: STKEEPER_METRICS_LISTEN_ADDRESS
              value: "0.0.0.0:{{ $.Params.INTERNAL_STOLON_METRICS_EXPORTER_PORT }}"
            {{ end }}
            {{ if eq $.Params.KEEPER_DEBUG "true" }}
            - name: STKEEPER_DEBUG
              value: "true"
            {{ end }}
          resources:
            requests:
              memory: "{{ $.Params.KEEPER_MEM_MIB }}Mi"
              cpu: "{{ $.Params.KEEPER_CPU_MC }}m"
            limits:
              memory: "{{ $.Params.KEEPER_MEM_LIMIT_MIB }}Mi"
              cpu: "{{ $.Params.KEEPER_CPU_LIMIT_MC }}m" 
          ports:
            - containerPort: 5432
            {{ if eq $.Params.PROMETHEUS_EXPORTER_ENABLED "true" }}
            - containerPort: {{ $.Params.INTERNAL_STOLON_METRICS_EXPORTER_PORT }}
            {{ end }}
          volumeMounts:
            - mountPath: /stolon-data
              name: data
            - mountPath: /etc/secrets/credentials
              name: credentials
        {{ if eq $.Params.PROMETHEUS_EXPORTER_ENABLED "true" }}
        - name: prometheus-exporter
          image: {{ $.Params.PROMETHEUS_EXPORTER_DOCKER_IMAGE }}
          imagePullPolicy: {{ $.Params.PROMETHEUS_EXPORTER_DOCKER_IMAGE_PULL_POLICY }}
          resources:
            requests:
              memory: "{{ $.Params.PROMETHEUS_EXPORTER_MEM_MIB }}Mi"
              cpu: "{{ $.Params.PROMETHEUS_EXPORTER_CPU_MC }}m"
            limits:
              memory: "{{ $.Params.PROMETHEUS_EXPORTER_MEM_LIMIT_MIB }}Mi"
              cpu: "{{ $.Params.PROMETHEUS_EXPORTER_CPU_LIMIT_MC }}m"
          env:
            - name: DATA_SOURCE_URI
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: DATA_SOURCE_USER
              valueFrom:
                secretKeyRef:
                  name: {{ $.Params.CREDENTIALS_SECRET_NAME }}
                  key: superuser-name
            - name: DATA_SOURCE_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ $.Params.CREDENTIALS_SECRET_NAME }}
                  key: superuser-password
            - name: PGDATABASE
              value: "postgres"
            - name: PGSSLMODE
              value: "disable"
            - name: PG_EXPORTER_DISABLE_SETTINGS_METRICS
              value: "true"
            - name: PG_EXPORTER_WEB_LISTEN_ADDRESS
              value: {{ $.Params.INTERNAL_PG_EXPORTER_PORT }}
          ports:
            - containerPort: {{ $.Params.INTERNAL_PG_EXPORTER_PORT }}
        {{ end }}
      volumes:
        - name: credentials
          secret:
            secretName: {{ $.Params.CREDENTIALS_SECRET_NAME }}
  # Define your own volumeClaimTemplate. This example uses dynamic PV provisioning with a storage class named "standard" (so it will works by default with minikube)
  # In production you should use your own defined storage-class and configure your persistent volumes (statically or dynamically using a provisioner, see related k8s doc).
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
          volume.alpha.kubernetes.io/storage-class: standard
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ $.Params.KEEPER_DISK_SIZE_GIB }}Gi