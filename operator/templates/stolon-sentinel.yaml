apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $.Name }}-sentinel
spec:
  replicas: {{ $.Params.SENTINEL_NODES }}
  selector:
    matchLabels:
      component: stolon-sentinel
      stolon-cluster: {{ $.Params.CLUSTER_NAME }}
  template:
    metadata:
      labels:
        component: stolon-sentinel
        stolon-cluster: {{ $.Params.CLUSTER_NAME }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      serviceAccountName: "{{ $.Name }}-sa"
      containers:
        - name: stolon-sentinel
          image: {{ $.Params.STOLON_DOCKER_IMAGE }}
          imagePullPolicy: {{ $.Params.STOLON_DOCKER_IMAGE_PULL_POLICY }}
          command:
            - "/bin/bash"
            - "-ec"
            - |
              exec gosu stolon stolon-sentinel
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: STSENTINEL_CLUSTER_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['stolon-cluster']
            - name: STSENTINEL_STORE_BACKEND
              value: "kubernetes"
            - name: STSENTINEL_KUBE_RESOURCE_KIND
              value: "configmap"
            {{ if eq $.Params.PROMETHEUS_EXPORTER_ENABLED "true" }}
            - name: STSENTINEL_METRICS_LISTEN_ADDRESS
              value: "0.0.0.0:8080"
            {{ end }}
            {{ if eq $.Params.SENTINEL_DEBUG "true" }}
            - name: STSENTINEL_DEBUG
              value: "true"
            {{ end }}
          resources:
            requests:
              memory: "{{ $.Params.SENTINEL_MEM_MIB }}Mi"
              cpu: "{{ $.Params.SENTINEL_CPU_MC }}m"
            limits:
              memory: "{{ $.Params.SENTINEL_MEM_LIMIT_MIB }}Mi"
              cpu: "{{ $.Params.SENTINEL_CPU_LIMIT_MC }}m"
          {{ if eq $.Params.PROMETHEUS_EXPORTER_ENABLED "true" }}
          ports:
            - containerPort: 8080
          {{ end }}